datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

/// A user.
model User {
  // BASIC INFO
  /// The unique identifier of a user.
  id                  Int       @id @default(autoincrement())
  /// The user's email address (must be unique).
  email               String    @unique
  /// The user's hashed password.
  hashedPassword      String
  /// The salt used to hash the user's password.
  salt                String
  /// A reset token for the user's password if generated.
  resetToken          String?
  /// The time at which the reset token expires.
  resetTokenExpiresAt DateTime?

  // RELATIONSHIP INFO
  /// All of the user's games.
  games Game[]
}

enum GameType {
  SORTING
  MATCHING
}

model Game {
  // Basic info
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type      GameType

  // Gameplay info
  wordsPerPhoneme Int
  phonemes        Int[]
  level           Int     @default(1)
  complete        Boolean @default(false)
  currentWordId   Int?

  // Relationship info
  currentWord     Word?  @relation("currentGames", fields: [currentWordId], references: [id])
  allWords        Word[] @relation("allGames")
  incompleteWords Word[] @relation("incompleteGames")
}

model Word {
  // Basic info
  id              Int      @id @default(autoincrement())
  word            String   @unique
  gradeLevel      Int
  numSyllables    Int
  phonemes        Int[]
  testedPhonemes  Int[]
  graphemes       String[]
  testedGraphemes String[]
  syllables       String[]
  sentences       String[]

  // Relationship info
  currentGames    Game[] @relation("currentGames")
  allGames        Game[] @relation("allGames")
  incompleteGames Game[] @relation("incompleteGames")
}
